on: [push, pull_request]

name: R-CMD-check

jobs:
  R-CMD-check:
    if: "! contains(github.event.head_commit.message, '[ci skip]')"    

    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: windows-latest, r: 'devel'}
          - {os: windows-latest, r: 'release'}
          - {os: windows-latest, r: 'oldrel'}
          - {os: macOS-latest,   r: 'devel'}
#2020-09-24#          - {os: macOS-latest,   r: 'release'}
          - {os: macOS-latest,   r: 'oldrel'}
          - {os: ubuntu-20.04,   r: 'devel',   rspm: "https://packagemanager.rstudio.com/cran/__linux__/xenial/latest"}
          - {os: ubuntu-20.04,   r: 'release', rspm: "https://packagemanager.rstudio.com/cran/__linux__/xenial/latest"}
          - {os: ubuntu-20.04,   r: 'oldrel',  rspm: "https://packagemanager.rstudio.com/cran/__linux__/xenial/latest"}
          - {os: ubuntu-20.04,   r: '3.4',     rspm: "https://packagemanager.rstudio.com/cran/__linux__/xenial/latest"}
          - {os: ubuntu-20.04,   r: '3.3',     rspm: "https://packagemanager.rstudio.com/cran/__linux__/xenial/latest"}
          - {os: ubuntu-20.04,   r: '3.2',     rspm: "https://packagemanager.rstudio.com/cran/__linux__/xenial/latest"}
          - {os: ubuntu-20.04,   r: '3.1',     rspm: "https://packagemanager.rstudio.com/cran/__linux__/xenial/latest"}

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      R_FUTURE_RNG_ONMISUSE: error
      _R_CHECK_LENGTH_1_CONDITION_: true
      _R_CHECK_LENGTH_1_LOGIC2_: true
      _R_CHECK_MATRIX_DATA_: true
      RSPM: ${{ matrix.config.rspm }}
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v2

      - uses: r-lib/actions/setup-r@master
        with:
          r-version: ${{ matrix.config.r }}

      - uses: r-lib/actions/setup-pandoc@master

      - name: Install dependencies for legacy versions of R
        if: runner.os == 'Linux' && (matrix.config.r == '3.0' || matrix.config.r == '3.1' || matrix.config.r == '3.2')
        run: |
          ## R (<= 3.1.0) requires HTTP - they don't support HTTPS
          ## digest 0.6.15 requires R (>= 2.4.1)
          ## digest 0.6.16 requires R (>= 3.1.0)
          install.packages("http://cran.r-project.org/src/contrib/Archive/digest/digest_0.6.15.tar.gz")
          ## remotes requires (>= 3.0.0)
          install.packages("remotes", repos="http://cloud.r-project.org")
          ## Specific to matrixStats:
          ## ggplot2 3.0.0 requires R (>= 3.0)
          ## ggplot2 3.1.1 requires R (>= 3.1)
          ## ggplot2 3.2.0 requires R (>= 3.2)
          ## ggplot2 3.3.3 requires R (>= 3.2)
          ## ggplot2 3.3.4 requires R (>= 3.3)
          install.packages("http://cran.r-project.org/src/contrib/Archive/ggplot2/ggplot2_3.1.1.tar.gz")
        shell: Rscript {0}

      - name: Query dependencies
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
        shell: Rscript {0}

      - name: Cache R packages
        if: runner.os != 'Windows'
        uses: actions/cache@v1
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-

      - name: Install system dependencies
        if: runner.os == 'Linux'
        env:
          RHUB_PLATFORM: linux-x86_64-ubuntu-gcc
        run: |
          Rscript -e "remotes::install_github('r-hub/sysreqs')"
          sysreqs=$(Rscript -e "cat(sysreqs::sysreq_commands('DESCRIPTION'))")
          sudo -s eval "$sysreqs"

      - name: Install dependencies
        run: |
          remotes::install_deps(dependencies = TRUE)
          remotes::install_cran("rcmdcheck")
        shell: Rscript {0}

      - name: Session info
        run: |
          options(width = 100)
          pkgs <- installed.packages()[, "Package"]
          sessioninfo::session_info(pkgs, include_base = TRUE)
        shell: Rscript {0}

      - name: Check
        env:
          _R_CHECK_CRAN_INCOMING_: false
        run: rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran"), error_on = "warning", check_dir = "check")
        shell: Rscript {0}

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@master
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-results
          path: check

      - name: Test coverage - Install dependencies
        if: runner.os == 'Linux' && matrix.config.r == 'release'
        run: |
            sudo apt-get install --yes libcurl4-openssl-dev
            ## Workaround: 'curl' from RSPM fails to load; install from CRAN
            Rscript -e "install.packages('curl', repos='https://cloud.r-project.org')"
            Rscript -e "install.packages('covr')"
            
      - name: Test coverage
        if: runner.os == 'Linux' && matrix.config.r == 'release'
        run: |
          ## 1. Get 'Repository Upload Token' from Codecov:
          ##    https://app.codecov.io/gh/<org>/<repo>/settings
          ## 2. Set 'CODECOV_TOKEN' in GitHub Secrets:
          ##    https://github.com/<org>/<repo>/settings/environments/
          coverage <- covr::package_coverage()
          print(coverage)
          covr::codecov(coverage = coverage, token="${{secrets.CODECOV_TOKEN}}")
        shell: Rscript {0}
