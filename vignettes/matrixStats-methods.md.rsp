<%@meta language="R-vignette" content="--------------------------------
  DIRECTIVES FOR R:

  %\VignetteIndexEntry{matrixStats: Summary of functions}
  %\VignetteAuthor{Henrik Bengtsson}
  %\VignetteKeyword{matrix, vector, memory, fast}
  %\VignetteEngine{R.rsp::rsp}
  %\VignetteTangle{FALSE}
--------------------------------------------------------------------"%>
<% t0 <- Sys.time() %>
<%
kable <- function(...) print(knitr::kable(..., format="markdown"))

pkgName <- "matrixStats"
library(pkgName, character.only=TRUE)
ns <- getNamespace(pkgName)
env <- as.environment(sprintf("package:%s", pkgName))

# Find all functions
all <- ls(envir=env)
keep <- sapply(all, FUN=function(name) {
  is.function(get(name, envir=env))
})
all <- all[keep]
keep <- !grepl("[.]([^.]*)$", all)
all <- all[keep]

# Hidden functions
skip <- c("rowAvgsPerColSet", "colAvgsPerRowSet")
skip <- c(skip, "allocArray", "allocMatrix", "allocVector")
all <- setdiff(all, skip)

# Column and row functions
crfcns <- grep("^(col|row)", all, value=TRUE)

# Vector functions
vfcns <- setdiff(all, crfcns)
%>

# <%@meta name="title"%>

<% pkg <- R.oo::Package(pkgName) %>
<%@meta name="author"%> on <%=format(as.Date(pkg$date), format="%B %d, %Y")%>

## Functions that apply to column and rows of matrices
<%
fcns <- crfcns
base <- gsub("^(col|row)", "", fcns)
groups <- tapply(fcns, base, FUN=list)
stopifnot(all(sapply(groups, FUN=length) == 2L))
groups <- matrix(unlist(groups, use.names=FALSE), nrow=2L)
%>
```
<% print(fcns) %>
```

## Functions that apply to vectors
<%
fcns <- vfcns
%>
```
<% print(fcns) %>
```


## Location and scale estimators
<%
tbl <- NULL

row <- data.frame(
  "Estimator"   = "Weighted sample mean",
  "Functions"   = c("`weightedMean()`, `colWeightedMeans()`, `rowWeighedMeans()`"),
  "Example"     = "weightedMean(x, w); rowWeightedMeans(x, w)"
)
tbl <- rbind(tbl, row)

row <- data.frame(
  "Estimator"   = "Median",
  "Functions"   = c("`median()`, `colMedians()`, `rowMedians()`"),
  "Example"     = "median(x), rowMedians(x)"
)
tbl <- rbind(tbl, row)

row <- data.frame(
  "Estimator"   = "Weighted median",
  "Functions"   = c("`weightedMedian()`, `colWeightedMedians()`, `rowWeighedMedians()`"),
  "Example"     = "weightedMedian(x, w); rowWeightedMedians(x, w)"
)
tbl <- rbind(tbl, row)

row <- data.frame(
  "Estimator"   = "Sample variance",
  "Functions"   = c("`var()`, `colVars()`, `rowVars()`"),
  "Example"     = "var(x), rowVars(x)"
)
tbl <- rbind(tbl, row)

row <- data.frame(
  "Estimator"   = "Weighted sample variance",
  "Functions"    = c("`weightedVar()`"),
  "Example"     = "weightedVar(x, w)"
)
tbl <- rbind(tbl, row)

row <- data.frame(
  "Estimator"   = "Sample variance by n-order differences",
  "Functions"    = c("`varDiff()`"),
  "Example"     = "varDiff(x)"
)
tbl <- rbind(tbl, row)

row <- data.frame(
  "Estimator"   = "Sample standard deviation",
  "Functions"   = c("`sd(), colSds()`, `rowSds()`"),
  "Example"     = "sd(x), rowSds(x)"
)
tbl <- rbind(tbl, row)

row <- data.frame(
  "Estimator"   = "Weighted sample deviation",
  "Functions"    = c("`weightedSd()`"),
  "Example"     = "weightedSd(x, w)"
)
tbl <- rbind(tbl, row)

row <- data.frame(
  "Estimator"   = "Sample standard deviation by n-order differences",
  "Functions"    = c("`sdDiff()`"),
  "Example"     = "sdDiff(x)"
)
tbl <- rbind(tbl, row)

row <- data.frame(
  "Estimator"   = "Median absolute deviation (MAD)",
  "Functions"   = c("`mad()`, `colMads()`, `rowMads()`"),
  "Example"     = "mad(x), rowMads(x)"
)
tbl <- rbind(tbl, row)

row <- data.frame(
  "Estimator"   = "Weighted median absolute deviation (MAD)",
  "Functions"    = c("`weightedMad()`"),
  "Example"     = "weightedMad(x, w)"
)
tbl <- rbind(tbl, row)


row <- data.frame(
  "Estimator"   = "Median absolute deviation (MAD) by n-order differences",
  "Functions"    = c("`madDiff()`"),
  "Example"     = "madDiff(x)"
)
tbl <- rbind(tbl, row)

row <- data.frame(
  "Estimator"   = "Quantile",
  "Functions"   = c("`quantile(), colQuantiles()`, `rowQuantiles()`"),
  "Example"     = "quantile(x, probs=c(0.25, 0.75); rowQuantiles(x, probs=c(0.25, 0.75))"
)
tbl <- rbind(tbl, row)

row <- data.frame(
  "Estimator"   = "Interquartile range (IQR)",
  "Functions"   = c("`colIQRs()`, `rowIQRs()`"),
  "Example"     = "rowIQRs(x)"
)
tbl <- rbind(tbl, row)

row <- data.frame(
  "Estimator"   = "Range",
  "Functions"   = c("`range(x), colRanges()`, `rowRanges()`"),
  "Example"     = "range(x), rowRanges(x)"
)
tbl <- rbind(tbl, row)

row <- data.frame(
  "Estimator"   = "Minimum",
  "Functions"   = c("`min(), colMins()`, `rowMins()`"),
  "Example"     = "min(x), rowMins(x)"
)
tbl <- rbind(tbl, row)

row <- data.frame(
  "Estimator"   = "Maximum",
  "Functions"   = c("`max(), colMaxs()`, `rowMaxs()`"),
  "Example"     = "max(x), rowMaxs(x)"
)
tbl <- rbind(tbl, row)

tbl$Example <- sprintf("`%s`", tbl$Example)
%>
<% kable(tbl) %>


## Binning

<%
tbl <- NULL

row <- data.frame(
  "Estimator"   = "Counts in disjoint bins",
  "Functions"    = c("`binCounts()`"),
  "Example"     = "binCounts(x, bx)"
)
tbl <- rbind(tbl, row)

row <- data.frame(
  "Estimator"   = "Sample means (and counts) in disjoint bins",
  "Functions"    = c("`binMeans()`"),
  "Example"     = "binMeans(y, x, bx)"
)
tbl <- rbind(tbl, row)

tbl$Example <- sprintf("`%s`", tbl$Example)
%>
<% kable(tbl) %>


## Testing for and counting values
<%
tbl <- NULL

row <- data.frame(
  "Estimator"   = "Are there any missing values?",
  "Functions"   = c("`anyMissing()`, `colAnyMissing()`, `rowAnyMissing()`"),
  "Example"     = "anyMissing(x); rowAnyMissing(x)"
)
tbl <- rbind(tbl, row)

row <- data.frame(
  "Estimator"   = "Does TRUE exists?",
  "Functions"   = c("`any()`, `colAnys()`, `rowAnys()`"),
  "Example"     = "any(x); rowAnys(x)"
)
tbl <- rbind(tbl, row)

row <- data.frame(
  "Estimator"   = "Are all values TRUE?",
  "Functions"   = c("`all()`, `colAll()`, `rowAlls()`"),
  "Example"     = "all(x); rowAlls(x)"
)
tbl <- rbind(tbl, row)

row <- data.frame(
  "Estimator"   = "Does value exists?",
  "Functions"   = c("`anyValue()`, `colAnys()`, `rowAnys()`"),
  "Example"     = "anyValue(x, value); rowAnys(x, value)"
)
tbl <- rbind(tbl, row)

row <- data.frame(
  "Estimator"   = "Do all element have the a given value?",
  "Functions"   = c("`allValue()`, `colAll()`, `rowAlls()`"),
  "Example"     = "allValue(x, value); rowAlls(x, value)"
)
tbl <- rbind(tbl, row)

row <- data.frame(
  "Estimator"   = "Number of occurrences of a value?",
  "Functions"   = c("`count()`, `colCounts()`, `rowCounts()`"),
  "Example"     = "count(x, value); rowCounts(x, value)"
)
tbl <- rbind(tbl, row)

tbl$Example <- sprintf("`%s`", tbl$Example)
%>
<% kable(tbl) %>


-------------------------------------------------------------
The <%=pkgName%> v<%=getVersion(pkg)%>.  Release: [CRAN](http://cran.r-project.org/package=<%=pkgName%>), Development: [GitHub](<%=getUrl(pkg)%>).
